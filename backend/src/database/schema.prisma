l generator client {
  provider      = "prisma-client-js"
  output        = "../../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(cuid())
  name               String        @db.VarChar(255)
  email              String        @unique @db.VarChar(255)
  phone              String?       @db.VarChar(20)
  password           String        @db.VarChar(255)
  registrationDate   DateTime      @default(now())
  type               UserType
  active             Boolean       @default(true)
  registrationNumber String?       @unique @db.VarChar(20)
  course             String?       @db.VarChar(255)
  level              StudentLevel?
  department         String?       @db.VarChar(255)
  title              String?       @db.VarChar(100)
  admissionDate      DateTime?
  loanLimit          Int           @default(3)
  loanDays           Int           @default(7)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  fines              Fine[]
  loansMade          Loan[]        @relation("LibrarianLoan")
  loans              Loan[]
  reservations       Reservation[]
  reviews            Review[]

  @@index([email])
  @@index([registrationNumber])
  @@index([type])
  @@map("users")
}

model Material {
  id               String         @id @default(cuid())
  title            String         @db.VarChar(500)
  author           String         @db.VarChar(255)
  isbn             String?        @unique @db.VarChar(20)
  issn             String?        @db.VarChar(20)
  publisher        String?        @db.VarChar(255)
  publicationYear  Int?
  edition          String?        @db.VarChar(50)
  category         String         @db.VarChar(100)
  subcategory      String?        @db.VarChar(100)
  location         String         @db.VarChar(50)
  status           MaterialStatus @default(AVAILABLE)
  type             MaterialType   @default(BOOK)
  numberOfPages    Int?
  language         String         @default("PortuguÃªs") @db.VarChar(50)
  description      String?
  keywords         String?
  assetNumber      String?        @unique @db.VarChar(20)
  acquisitionValue Decimal?       @db.Decimal(10, 2)
  acquisitionDate  DateTime?
  supplier         String?        @db.VarChar(255)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  loans            Loan[]
  reservations     Reservation[]
  reviews          Review[]

  @@index([title])
  @@index([author])
  @@index([isbn])
  @@index([category])
  @@index([status])
  @@map("materials")
}

model Loan {
  id           String     @id @default(cuid())
  userId       String
  materialId   String
  librarianId  String?
  loanDate     DateTime   @default(now())
  dueDate      DateTime
  returnDate   DateTime?
  renewalDate  DateTime?
  status       LoanStatus @default(ACTIVE)
  renewals     Int        @default(0)
  maxRenewals  Int        @default(2)
  observations String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  fines        Fine[]
  librarian    User?      @relation("LibrarianLoan", fields: [librarianId], references: [id])
  material     Material   @relation(fields: [materialId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([materialId])
  @@index([status])
  @@index([loanDate])
  @@index([dueDate])
  @@map("loans")
}

model Reservation {
  id              String            @id @default(cuid())
  userId          String
  materialId      String
  reservationDate DateTime          @default(now())
  expirationDate  DateTime
  status          ReservationStatus @default(ACTIVE)
  priority        Int               @default(1)
  observations    String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  material        Material          @relation(fields: [materialId], references: [id])
  user            User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([materialId])
  @@index([status])
  @@index([expirationDate])
  @@map("reservations")
}

model Fine {
  id           String     @id @default(cuid())
  loanId       String
  userId       String
  amount       Decimal    @db.Decimal(10, 2)
  daysOverdue  Int
  creationDate DateTime   @default(now())
  dueDate      DateTime
  paymentDate  DateTime?
  status       FineStatus @default(PENDING)
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  loan         Loan       @relation(fields: [loanId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([dueDate])
  @@map("fines")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  materialId String
  rating     Int      @db.SmallInt
  comment    String?
  reviewDate DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  material   Material @relation(fields: [materialId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, materialId])
  @@index([materialId])
  @@index([rating])
  @@map("reviews")
}

model SystemConfiguration {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  type        String   @db.VarChar(50)
  category    String   @db.VarChar(100)
  editable    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@map("system_configurations")
}

enum UserType {
  STUDENT
  PROFESSOR
  LIBRARIAN
  ADMIN
  STAFF

  @@map("user_type")
}

enum StudentLevel {
  UNDERGRADUATE
  POSTGRADUATE
  MASTERS
  DOCTORATE
  TECHNICAL

  @@map("student_level")
}

enum MaterialStatus {
  AVAILABLE
  LOANED
  RESERVED
  MAINTENANCE
  LOST
  DECOMMISSIONED

  @@map("material_status")
}

enum MaterialType {
  BOOK
  MAGAZINE
  JOURNAL
  DVD
  CD
  THESIS
  DISSERTATION
  MONOGRAPH
  ARTICLE
  MAP
  OTHER

  @@map("material_type")
}

enum LoanStatus {
  ACTIVE
  RETURNED
  OVERDUE
  RENEWED
  CANCELLED

  @@map("loan_status")
}

enum ReservationStatus {
  ACTIVE
  FULFILLED
  EXPIRED
  CANCELLED

  @@map("reservation_status")
}

enum FineStatus {
  PENDING
  PAID
  CANCELLED
  INSTALLMENT

  @@map("fine_status")
}
